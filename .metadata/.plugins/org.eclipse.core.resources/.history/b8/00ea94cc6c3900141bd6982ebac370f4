package menon.cs6100.program1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

//This agent uses the A* algorithm to find the shortest route from start to destination
public class TerrainNavigationAgent {
	
	//The set of nodes already evaluated
	private Set<PointOnTerrain> closedSet = new HashSet<PointOnTerrain>();
	//Tentative nodes to be evaluated ordered by increasing f score
	private PriorityQueue<PointOnTerrain> openSet = new PriorityQueue<PointOnTerrain>();
	//Used to reconstruct the path back to the start node
	private Map<PointOnTerrain, PointOnTerrain> cameFrom = new HashMap<PointOnTerrain, PointOnTerrain>();
	//Path from end back to the start node
	private ArrayList<PointOnTerrain> pathBackToStart = new ArrayList<PointOnTerrain>();
	
	//Details of terrain to be navigated
	private TerrainGrid terrainGrid;
	private PointOnTerrain startPoint;
	private PointOnTerrain endPoint;
	
	//Constructor
	public TerrainNavigationAgent(TerrainGrid terrainGrid, PointOnTerrain startPoint, PointOnTerrain endPoint) {
		
		this.terrainGrid = terrainGrid;
		this.startPoint = startPoint;
		this.endPoint = endPoint;
		
	}
	
	//Return the shortest path from start to end
	ArrayList<PointOnTerrain> navigateTerrain() {
		
		//Add the start point to the open set
		this.startPoint.setgScore(0.0);
		this.startPoint.setfScore(this.startPoint.getDistanceToPoint(this.endPoint));
		openSet.add(this.startPoint);
		
		PointOnTerrain currentNode = null;
		while (!openSet.isEmpty()) {
			
			//Retrieve node with lowest f score
			currentNode = openSet.remove();
			//If retrieved node is the end node
			if (currentNode.getxCoordinate() == this.endPoint.getxCoordinate() && currentNode.getyCoordinate() == this.endPoint.getyCoordinate()) {
				return reconstructPathBack(currentNode);
			}
			
			closedSet.add(currentNode);
			currentNode.get
		
		}
		
		return pathBackToStart;
	}
	
	private ArrayList<PointOnTerrain> reconstructPathBack(PointOnTerrain currentNode) {
		return null;
	}
	
}
