package menon.cs6100.program1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

//This agent uses the A* algorithm to find the shortest route from start to destination
public class TerrainNavigationAgent {
	
	//The set of nodes already evaluated
	private Set<PointOnTerrain> closedSet = new HashSet<PointOnTerrain>();
	//Tentative nodes to be evaluated ordered by increasing f score
	private PriorityQueue<PointOnTerrain> openSet;
	//Used to reconstruct the path back to the start node
	private Map<PointOnTerrain, PointOnTerrain> cameFrom = new HashMap<PointOnTerrain, PointOnTerrain>();
	//Path from end back to the start node
	private ArrayList<PointOnTerrain> pathBackToStart = new ArrayList<PointOnTerrain>();
	
	//Details of terrain to be navigated
	private TerrainGrid terrainGrid;
	private PointOnTerrain startPoint;
	private PointOnTerrain endPoint;
	
	//Constructor
	public TerrainNavigationAgent(TerrainGrid terrainGrid) {
		
		this.terrainGrid = terrainGrid;
		this.openSet = new PriorityQueue<PointOnTerrain>(terrainGrid.getWidth() * terrainGrid.getHeight(), new TerrainPointComparator());
		
	}
	
	//Return the shortest path from start to end
	ArrayList<PointOnTerrain> navigateTerrain() {
		
		if (this.startPoint == null || this.endPoint == null) {
			return null;
		}
		
		//Add the start point to the open set
		this.startPoint.setgScore(0.0);
		this.startPoint.setfScore(this.startPoint.getDistanceToPoint(this.endPoint));
		openSet.add(this.startPoint);
		
		PointOnTerrain currentNode = null;
		while (!openSet.isEmpty()) {
			
			//Retrieve node with lowest f score
			currentNode = openSet.remove();
			System.out.println("Retrieved lowest score node " + currentNode.getxCoordinate() + "," + currentNode.getyCoordinate());
			//If retrieved node is the end node
			if (currentNode.getxCoordinate() == this.endPoint.getxCoordinate() && currentNode.getyCoordinate() == this.endPoint.getyCoordinate()) {
				reconstructPathBack(currentNode);
				return pathBackToStart;
			}
			
			closedSet.add(currentNode);
			processNeighboringNode(this.terrainGrid.getNeighborToNorth(currentNode), currentNode);
			processNeighboringNode(this.terrainGrid.getNeighborToSouth(currentNode), currentNode);
			processNeighboringNode(this.terrainGrid.getNeighborToEast(currentNode), currentNode);
			processNeighboringNode(this.terrainGrid.getNeighborToWest(currentNode), currentNode);
		
		}
		
		return null;
		
	}
	
	public void setStartPoint(PointOnTerrain startPoint) {
		this.startPoint = new PointOnTerrain(startPoint.getxCoordinate(), startPoint.getyCoordinate() - AStarSearchDemo.TOP_OFFSET);
	}
	
	public void setEndPoint(PointOnTerrain endPoint) {
		this.endPoint = new PointOnTerrain(endPoint.getxCoordinate(), endPoint.getyCoordinate() - AStarSearchDemo.TOP_OFFSET);
	}
	
	void erasePathBackToStart() {
		
		pathBackToStart = new ArrayList<PointOnTerrain>();
		
	}
	
	private void processNeighboringNode(PointOnTerrain neighbor, PointOnTerrain currentNode) {
		
		if (neighbor == null) {
			return;
		}
		
		System.out.println("Processing node " + neighbor.getxCoordinate() + "," + neighbor.getyCoordinate());
		
		if (closedSet.contains(neighbor)) {
			return;
		}
		
		double tentativeGScore = currentNode.getgScore() + 1;
		
		if (!openSet.contains(neighbor) || tentativeGScore < neighbor.getgScore()) {
			if (cameFrom.containsKey(neighbor)) {
				cameFrom.remove(neighbor);
			}
			cameFrom.put(neighbor, currentNode);
			System.out.println("Node " + neighbor.getxCoordinate() + "," + neighbor.getyCoordinate() + " came from " + currentNode.getxCoordinate() + "," + currentNode.getyCoordinate());
			neighbor.setgScore(tentativeGScore);
			neighbor.setfScore(neighbor.getgScore() + neighbor.getDistanceToPoint(endPoint));
			if (!openSet.contains(neighbor)) {
				openSet.add(neighbor);
			}
		}
	}
	
	private void reconstructPathBack(PointOnTerrain currentNode) {
		
		if (cameFrom.containsKey(currentNode)) {
			pathBackToStart.add(currentNode);
			reconstructPathBack(cameFrom.get(currentNode));
		} else {
			pathBackToStart.add(currentNode);
		}

	}
	
}
